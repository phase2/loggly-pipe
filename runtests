#!/bin/bash

set -e

export PORT=${PORT:-19090}

export EXE="${EXE:-./loggly_pipe.py}"
export LOGGLY_BATCH_SIZE=10
export LOGGLY_MAX_LINES=100
export LOGGLY_SERVER="http://localhost:${PORT}"
export LOGGLY_TOKEN=fizzbuzz-$RANDOM
export LOGGLY_SHIPPER_COUNT=2
export LOOPS=200

setup() {
  ./examples/fake_loggly_server.py >$1 2>$2 &
  export SERVER_PID="$!"

  while ! curl -s localhost:$PORT >/dev/null ; do
    sleep 0.1
  done
}

teardown() {
  kill "$SERVER_PID"
  rm -f "${1:-$TMPOUT}" "${2:-$SERVEROUT}" "${3:-$SERVERERR}"
}

suite() {
  local exe="$1"
  local output="$2"
  local serveroutput="$3"
  local servererr="$4"
  local exitstatus

  echo '---> START SUITE'

  if [[ $LOGGLY_DEBUG ]] ; then
    set -x
    echo "---> output file: $output"
    echo "---> server output file: $serveroutput"
    echo "---> server error file: $servererr"
  fi

  setup "$serveroutput" "$servererr"

  echo "Running $exe > $output"
  ./examples/example_app.py | "$exe" > "$output"

  if [[ $(grep -c '^===> ' "$serveroutput") == $LOGGLY_MAX_LINES ]] ; then
    echo 'Success!'
    exitstatus=0
  else
    echo 'Fail!'
    exitstatus=1
  fi

  if [[ $LOGGLY_DEBUG ]] ; then
    echo '--- OUTPUT ---'
    cat "$output"
    echo '--- SERVER OUTPUT ---'
    cat "$serveroutput"
    echo '--- SERVER ERROR ---'
    cat "$servererr"
  fi

  teardown "$output" "$serveroutput" "$servererr"
  echo '---> END SUITE'
  exit "$exitstatus"
}

trap 'teardown' SIGINT

TMPOUT=$(mktemp -t "loggly-pipe-$$.out.XXXX")
SERVEROUT=$(mktemp -t "loggly-pipe-$$.server.out.XXXX")
SERVERERR=$(mktemp -t "loggly-pipe-$$.server.err.XXXX")

suite "$EXE" "$TMPOUT" "$SERVEROUT" "$SERVERERR"
